name: Bump Version & Create Release

on:
  pull_request:
    types: [closed]

jobs:
  bump_version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep '^version =' pyproject.toml | awk -F'=' '{print $2}' | tr -d ' "')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Determine version bump type
        id: get_bump_type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" == Patch:* ]]; then
            BUMP="patch"
          elif [[ "$PR_TITLE" == Minor:* ]]; then
            BUMP="minor"
          elif [[ "$PR_TITLE" == Major:* ]]; then
            BUMP="major"
          else
            BUMP="patch"  # Default to patch if unspecified
          fi
          echo "BUMP=$BUMP" >> $GITHUB_ENV

      - name: Bump Version
        id: bump_version
        run: |
          CURRENT_VERSION=$(grep '^version =' pyproject.toml | awk -F'=' '{print $2}' | tr -d ' "')
          CURRENT_VERSION=$(echo "$CURRENT_VERSION" | tr -d '\r\n')  # Cleans up unexpected characters
          
          echo "Extracted version string: $CURRENT_VERSION"
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$(echo $CURRENT_VERSION)"
          
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          
          # Ensure values are numeric
          MAJOR=$((MAJOR + 0))
          MINOR=$((MINOR + 0))
          PATCH=$((PATCH + 0))
          
          echo "Parsed version numbers: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
          
          case "$BUMP" in
            major) ((MAJOR++)); MINOR=0; PATCH=0 ;;
            minor) ((MINOR++)); PATCH=0 ;;
            patch) ((PATCH++)) ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update version in pyproject.toml
        run: |
          sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" pyproject.toml

      - name: Update __version__ in __init__.py
        run: |
          sed -i "s/^__version__ = .*/__version__ = \"$NEW_VERSION\"/" dstaf/__init__.py

      - name: Commit and push version update
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add pyproject.toml dstaf/__init__.py
          git commit -m "Bump version to $NEW_VERSION"
          git push origin master

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.NEW_VERSION }}"
          name: "Release ${{ env.NEW_VERSION }}"
          body: "Automated release from merged PR."
          draft: false
          prerelease: false
