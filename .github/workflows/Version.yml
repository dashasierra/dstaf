name: CI/CD

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

jobs:

  check-title:
    name: Check PR for Version Tag
    runs-on: ubuntu-latest
    if: github.event_name != 'push'
    steps:
      - name: Validate Pull Request Title
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          if [[ ! "$PR_TITLE" =~ ^(Major|Minor|Patch|None) ]]; then
            echo "Error: Pull request title must start with 'Major', 'Minor', 'Patch', or 'None'."
            echo "     - '$PR_TITLE'"
            exit 1
          fi

  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'push'
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Bandit
      run: |
        pip install --upgrade bandit

    - name: Scan Code
      run: |
        bandit dstaf -r -v -n 3 --severity-level=all

  release:
    name: Create New Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Increment Version
      id: bump-tag
      uses: anothrNick/github-tag-action@1.73.0
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        WITH_V: false
        DRY_RUN: true
        DEFAULT_BUMP: patch
        MAJOR_STRING_TOKEN: Major
        MINOR_STRING_TOKEN: Minor
        PATCH_STRING_TOKEN: Patch
        NONE_STRING_TOKEN: None

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_PK }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts

    - name: Update Version Strings
      env:
        NEW_TAG: ${{ steps.bump-tag.outputs.new_tag }}
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/dashasierra/dstaf.git
        git checkout -b auto-version-update
        sed -i "s/^version = .*/version = \"${NEW_TAG}\"/" pyproject.toml
        sed -i "s/^__version__ = .*/__version__ = \"${NEW_TAG}\"/" dstaf/__init__.py
        git add pyproject.toml dstaf/__init__.py
        git commit -m "Bump Version to ${NEW_TAG}"
        git push origin auto-version-update

    - name: Create a pull request
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        gh pr create --title "Auto Version Bump to ${NEW_TAG}" \
                     --body "Automated version update triggered by GitHub Actions" \
                     --base master --head auto-version-update
    - name: Review the pull request
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        gh pr review --approve --repo dashasierra/dstaf

    - name: Merge the pull request
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        gh pr merge --merge --repo dashasierra/dstaf

    - name: Checkout for Tag
      uses: actions/checkout@v4
      with:
        ref: master

    - name: Extract major, minor, patch v-versions
      id: major-version
      run: |
        echo "vmajor=v$(echo ${{ steps.bump-tag.outputs.new_tag }} | cut -d. -f1)" >> $GITHUB_ENV
        echo "vminor=v$(echo ${{ steps.bump-tag.outputs.new_tag }} | cut -d. -f1,2)" >> $GITHUB_ENV
        echo "vpatch=v$(echo ${{ steps.bump-tag.outputs.new_tag }} | cut -d. -f1,2,3)" >> $GITHUB_ENV
    - name: Create or update tags
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        git tag -f "$vmajor"
        git push -f origin "$vmajor"
        git tag -f "$vminor"
        git push -f origin "$vminor"

    - name: Checkout for Release
      uses: actions/checkout@v4
      with:
        ref: master

    - name: Create Release
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        gh release create "v${{ steps.bump-tag.outputs.new_tag }}" \
          --repo="${{ github.repository }}" \
          --title="DStaf ${{ steps.bump-tag.outputs.new_tag }}" \
          --generate-notes
